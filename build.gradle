buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // querydsl 플러그인 추가
	id "org.asciidoctor.jvm.convert" version "3.3.2" // Spring Rest Docs
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}" // Querydsl Lib
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}" // Querydsl 관련 코드 생성 기능을 제공

	implementation 'org.springframework.boot:spring-boot-starter-webflux' // HTTP 클라이언트 라이브러리

	// parsing
	implementation 'org.json:json:20230227'
	// JSONObject -> Map
	implementation 'com.google.code.gson:gson:2.8.9'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation("org.junit.vintage:junit-vintage-engine") { // JUnit4 추가
		exclude group: "org.hamcrest", module: "hamcrest-core"
	}

	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'

}

tasks.named('test') {
	useJUnitPlatform()
}



// ============== BEGIN QueryDSL ==============
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
// ============== BEGIN QueryDSL ==============



// ============== BEGIN Spring REST Docs ==============
ext {
	snippetsDir = file('build/generated-snippets')
	docsDir = file('src/docs/asciidoc')
}
asciidoctor {
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	dependsOn test
	attributes 'docsDir': docsDir
}
bootJar {
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}"
		into 'src/main/resources/static/docs'
	}
}
test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

// ============== END Spring REST Docs ==============